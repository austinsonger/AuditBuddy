import os
import subprocess
from datetime import datetime
import json

# Current year to be used in file paths
current_year = datetime.utcnow().strftime('%Y')
current_date = datetime.utcnow().strftime('%Y-%m-%d')

# Dictionary holding environments configuration
environments = {
    'private-sector': {
        'access_key': os.getenv('DEVOPS_CORP_AWS_ACCESS_KEY_ID'),
        'secret_key': os.getenv('DEVOPS_CORP_AWS_SECRET_ACCESS_KEY'),
        'region': 'us-east-1',
        'private_sector_output_file': f"/evidence-artifacts/{current_year}/private-sector/"
    },
    'federal': {
        'access_key': os.getenv('DEVOPS_FEDERAL_AWS_ACCESS_KEY_ID'),
        'secret_key': os.getenv('DEVOPS_FEDERAL_AWS_SECRET_ACCESS_KEY'),
        'region': 'us-east-1',
        'federal_output_file': f"/evidence-artifacts/{current_year}/federal/"
    }
}

# Function to run shell commands and return the output
def run_command(command):
    result = subprocess.run(command, text=True, capture_output=True, shell=True)
    return result.stdout.splitlines()

# Main function to execute the process
def main():
    for env_name, config in environments.items():
        # Set AWS credentials for the current environment
        os.environ['AWS_ACCESS_KEY_ID'] = config['access_key']
        os.environ['AWS_SECRET_ACCESS_KEY'] = config['secret_key']
        os.environ['AWS_DEFAULT_REGION'] = config['region']

        # AWS CLI command setup
        aws_command = [
            'aws', 'codeguru-reviewer', 'list-recommendations',
            '--region', config['region'],
            '--output', 'json'
        ]

        # Execute the AWS CLI command
        output = run_command(' '.join(aws_command))

        # Determine the output file path based on environment
        output_file_path = config[env_name + '_output_file']

        # Ensure the output directory exists
        os.makedirs(os.path.dirname(output_file_path), exist_ok=True)

        # Write the JSON output to the file
        with open(output_file_path + 'source_code_vulnerability_scan_results.json', 'w') as file:
            json.dump(output, file)

if __name__ == "__main__":
    main()
